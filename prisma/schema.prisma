generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ENTREPRENEUR
  INVESTOR
}

model User {
  id                    Int                   @id @default(autoincrement())
  clerkId               String                @unique
  email                 String                @unique
  name                  String?
  imageUrl              String?
  role                  Role
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  messagesSent          Message[]             @relation("MessageSender")
  messagesReceived      Message[]             @relation("MessageReceiver")
  investments           Investment[]          // List of investments made by the user
  entrepreneurProfile   EntrepreneurProfile?
  investorProfile       InvestorProfile?
  pitches               Pitch[]               // Pitches submitted by the user (if an entrepreneur)
  feedbacks             Feedback[]            // Feedback given by the user (if an investor)
  interests             Interest[]            // Interests shown by the user
  subscription          Subscription?         @relation("UserSubscription", fields: [subscriptionid], references: [id])
subscriptionid Int?
  subscriptionId        Int?                  @unique
  billingAddress        Address?              @relation(fields: [billingAddressId], references: [id])
  billingAddressId      Int?                  @unique // Add this unique constraint
  paymentMethods        Json?                 // To store payment methods data as JSON
  customers             Customer[]            // Add this line

  Subscription Subscription[]
}

model PaymentMethod {
  id        Int      @id @default(autoincrement())
  method    String   // e.g., "credit_card", "paypal", etc.
  details   Json?    // JSON field to store payment method details
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  subscription Subscription[] @relation("SubscriptionPaymentMethod")
}

model Subscription {
  id                   Int          @id @default(autoincrement())
  stripeSubscriptionId String       @unique // Make sure this field is unique
  userId               Int
  user                 User         @relation(fields: [userId], references: [id])
  priceId              String
  status               String
  createdAt            DateTime     @default(now())
  updatedAt            DateTime     @updatedAt
  PaymentMethod        PaymentMethod[] @relation("SubscriptionPaymentMethod")

  User User[] @relation("UserSubscription")
}



model Customer {
  id                String   @id
  stripe_customer_id String   @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User?    @relation(fields: [userId], references: [id])
  userId            Int?
}


model Address {
  id         Int     @id @default(autoincrement())
  city       String?
  country    String?
  line1      String?
  line2      String?
  postal_code String?
  state      String?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  user       User?
}



model EntrepreneurProfile {
  id              Int       @id @default(autoincrement())
  userId          Int       @unique
  user            User      @relation(fields: [userId], references: [id])
  bio             String?
  company         String?
  businessStage   String?
  fundingHistory  String?
  linkedinUrl     String?
  startups        Startup[] // Startups managed by the entrepreneur
  pitches         Pitch[]   // Pitches submitted by the entrepreneur
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  investments     Investment[]
  notifications   Notification[] // Add this line
}


model InvestorProfile {
  id                   Int                   @id @default(autoincrement())
  userId               Int                   @unique
  user                 User                  @relation(fields: [userId], references: [id])
  investmentStrategy   String?
  linkedinUrl          String?
  investments          Investment[]          // Investments made by the investor
  feedbacks            Feedback[]            // Feedback given by the investor
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  notifications        Notification[]        // Add this line
}


model Investment {
  id                   Int                   @id @default(autoincrement())
  amount               Float
  date                 DateTime              @default(now())
  investorProfileId    Int
  entrepreneurProfileId Int
  investorProfile      InvestorProfile       @relation(fields: [investorProfileId], references: [id])
  entrepreneurProfile  EntrepreneurProfile   @relation(fields: [entrepreneurProfileId], references: [id])
  investmentOpportunityId Int
  investmentOpportunity InvestmentOpportunity @relation(fields: [investmentOpportunityId], references: [id])
  User                User[]
}

model Pitch {
  id                   Int                   @id @default(autoincrement())
  title                String
  description          String
  entrepreneurId       Int
  entrepreneur         EntrepreneurProfile   @relation(fields: [entrepreneurId], references: [id])
  feedbacks            Feedback[]            // Feedback given by investors
  interests            Interest[]            // Interests shown by users
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  category             String?
  fundingGoal          Float?
  currentFunding       Float?
  stage                String?
  video                Bytes?                 // For storing video data
  pitchDeck            Bytes?                 // For storing pitch deck data
  deadline             DateTime?
  locationId           Int?                   // Foreign key reference
  location             Location?              @relation(fields: [locationId], references: [id])
  tags                 String[]
  status               String?
  attachments          Bytes[]                // For storing attachments
  presentationDate     DateTime?
  User                 User[]
}

model Location {
  id      Int    @id @default(autoincrement())
  country String
  city    String

  pitches Pitch[]

  @@unique([country, city]) // This adds a composite unique constraint
}

model Feedback {
  id                   Int                   @id @default(autoincrement())
  content              String
  investorId           Int
  pitchId              Int
  investor             InvestorProfile       @relation(fields: [investorId], references: [id])
  pitch                Pitch                 @relation(fields: [pitchId], references: [id])
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  User                User[]
}

model Startup {
  id                   Int                   @id @default(autoincrement())
  name                 String
  description          String?
  entrepreneurId       Int
  entrepreneur         EntrepreneurProfile   @relation(fields: [entrepreneurId], references: [id])
  investmentOpportunities InvestmentOpportunity[]
  businessPlan         Bytes?                 // For storing business plan data
  pitchDeck            Bytes?                 // For storing pitch deck data
  financialProjections Bytes?                 // For storing financial projections data
}

model InvestmentOpportunity {
  id                   Int                   @id @default(autoincrement())
  startupId            Int
  startup              Startup               @relation(fields: [startupId], references: [id])
  amountRequested      Float
  description          String
  businessPlan         Bytes?                 // For storing business plan data
  pitchDeck            Bytes?                 // For storing pitch deck data
  financialProjections Bytes?                 // For storing financial projections data
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
  Investment           Investment[]
}

model Message {
  id                   Int                   @id @default(autoincrement())
  content              String
  senderId             Int
  receiverId           Int
  sender               User                  @relation("MessageSender", fields: [senderId], references: [id])
  receiver             User                  @relation("MessageReceiver", fields: [receiverId], references: [id])
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model Interest {
  id                   Int                   @id @default(autoincrement())
  userId               Int
  pitchId              Int
  user                 User                  @relation(fields: [userId], references: [id])
  pitch                Pitch                 @relation(fields: [pitchId], references: [id])
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}

model Notification {
  id                   Int                   @id @default(autoincrement())
  content              String
  entrepreneurId       Int
  investorId           Int
  entrepreneur         EntrepreneurProfile   @relation(fields: [entrepreneurId], references: [id])
  investor             InvestorProfile       @relation(fields: [investorId], references: [id])
  createdAt            DateTime              @default(now())
  updatedAt            DateTime              @updatedAt
}
